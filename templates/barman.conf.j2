; {{ ansible_managed }}
; Barman, Backup and Recovery Manager for PostgreSQL
; http://www.pgbarman.org/ - http://www.2ndQuadrant.com/
;
; Main configuration file

[barman]
; System user
barman_user = barman

; Directory of configuration files. Place your sections in separate files with .conf extension
; For example place the 'main' server section in /etc/barman.d/main.conf
;configuration_files_directory = /etc/barman.d

; Main directory
barman_home = /var/lib/barman

; Locks directory - default: %(barman_home)s
;barman_lock_directory = /var/run/barman

; Log location
log_file = /var/log/barman/barman.log

; Log level (see https://docs.python.org/3/library/logging.html#levels)
log_level = INFO

; Default compression level: possible values are None (default), bzip2, gzip, pigz, pygzip or pybzip2
compression = gzip

; Incremental backup support: possible values are None (default), link or copy
{% if barman_config['reuse_backup'] is defined -%}
reuse_backup = {{ barman_config['reuse_backup'] }}
{% else %}
;reuse_backup = None
{% endif %}

; Pre/post backup hook scripts
;pre_backup_script = env | grep ^BARMAN
;pre_backup_retry_script = env | grep ^BARMAN
;post_backup_retry_script = env | grep ^BARMAN
;post_backup_script = env | grep ^BARMAN

; Pre/post archive hook scripts
;pre_archive_script = env | grep ^BARMAN
;pre_archive_retry_script = env | grep ^BARMAN
;post_archive_retry_script = env | grep ^BARMAN
;post_archive_script = env | grep ^BARMAN

; Global retention policy (REDUNDANCY or RECOVERY WINDOW) - default empty
;retention_policy =

; Global bandwidth limit in KBPS - default 0 (meaning no limit)
{% if barman_config['bandwidth_limit'] is defined -%}
bandwidth_limit = {{ barman_config['bandwidth_limit'] }}
{% else %}
;bandwidth_limit = 4000
{% endif %}

; Number of parallel jobs for backup and recovery via rsync (default 1)
{% if barman_config['parallel_jobs'] is defined -%}
parallel_jobs = {{ barman_config['parallel_jobs'] }}
{% else %}
;parallel_jobs = 1
{% endif %}

; Immediate checkpoint for backup command - default false
;immediate_checkpoint = false

; Enable network compression for data transfers - default false
{% if barman_config['network_compression'] is defined -%}
network_compression = {{ barman_config['network_compression'] }}
{% else %}
;network_compression = false
{% endif %}

; Identify the standard behavior for backup operations: possible values are
; exclusive_backup (default), concurrent_backup
{% if barman_config['backup_options'] is defined -%}
backup_options = {{ barman_config['backup_options'] }}
{% else %}
;backup_options = exclusive_backup
{% endif %}

; Number of retries of data copy during base backup after an error - default 0
;basebackup_retry_times = 0

; Number of seconds of wait after a failed copy, before retrying - default 30
;basebackup_retry_sleep = 30

; Maximum execution time, in seconds, per server
; for a barman check command - default 30
;check_timeout = 30

; Time frame that must contain the latest backup date.
; If the latest backup is older than the time frame, barman check
; command will report an error to the user.
; If empty, the latest backup is always considered valid.
; Syntax for this option is: "i (DAYS | WEEKS | MONTHS)" where i is an
; integer > 0 which identifies the number of days | weeks | months of
; validity of the latest backup for this check. Also known as 'smelly backup'.
;last_backup_maximum_age =

; Use file based archiver
archiver = on
; Minimum number of required backups (redundancy)
;minimum_redundancy = 1

{% for database in barman_databases %}
{% if database.extract_host_from_var is defined -%}
{% set primary_host_name = hostvars[database.primary_host][database.extract_host_from_var] %}
{%- else %}
{% set primary_host_name = database.primary_host %}
{%- endif %}
[{{ database.name }}]
description = "{{ database.description }}"
ssh_command = ssh postgres@{{ primary_host_name }}
backup_method = {{ database.backup_method|default('rsync') }}
conninfo = host={{ primary_host_name }}
 {%- if database.primary_port is defined %} port={{ database.primary_port }}{% endif %}
 user=barman dbname=postgres
{% if database.backup_method|default('rsync') == 'postgres' %}
{% if database.wal_streaming is defined
  and database.wal_streaming
%}
streaming_archiver = on
slot_name = barman
{% endif %}
streaming_conninfo = host={{ primary_host_name }}
 {%- if database.primary_port is defined %} port={{ database.primary_port }}{% endif %}
 user=barman dbname=postgres
{% endif %}
retention_policy = {{ database.retention_policy | default('RECOVERY WINDOW OF 7 DAYS') }}
retention_policy_mode = auto

{% endfor %}

;; ; 'main' PostgreSQL Server configuration
;; [main]
;; ; Human readable description
;; description =  "Main PostgreSQL Database"
;;
;; ; SSH options
;; ssh_command = ssh postgres@pg
;;
;; ; PostgreSQL connection string
;; conninfo = host=pg user=postgres
;;
;; ; PostgreSQL streaming connection string
;; streaming_conninfo = host=pg user=postgres
;;
;; ; Minimum number of required backups (redundancy)
;; ; minimum_redundancy = 1
;;
;; ; Examples of retention policies
;;
;; ; Retention policy (disabled)
;; ; retention_policy =
;; ; Retention policy (based on redundancy)
;; ; retention_policy = REDUNDANCY 2
;; ; Retention policy (based on recovery window)
;; ; retention_policy = RECOVERY WINDOW OF 4 WEEKS
